{"version":3,"file":"index.modern.mjs","sources":["../src/toPosition.js","../src/toLatLng.js","../src/toLatLngs.js","../src/toBounds.js","../src/projWGS84ToVN2000.js","../src/projVN2000ToWGS84.js","../src/parseLatLngStr.js"],"sourcesContent":["import center from '@turf/center'\r\nimport { getCoord } from '@turf/invariant'\r\nimport flip from '@turf/flip'\r\nimport { flow, isString } from 'lodash'\r\nimport isLatLongStr from 'validator/lib/isLatLong.js';\r\nimport { parseLatLngStr } from './index'\r\n\r\nfunction toPosition(geojson) {\r\n  if(isLatLongStr(geojson)) return parseLatLngStr(geojson)\r\n\r\n  return flow([\r\n    center, flip, getCoord\r\n  ])(geojson)\r\n}\r\n\r\nexport default toPosition","import toPosition from './toPosition'\r\n\r\nfunction toLatLngs(geojson) {\r\n  const position = toPosition(geojson)\r\n\r\n  return {\r\n    lat: position[0],\r\n    lng: position[1]\r\n  }\r\n}\r\n\r\nexport default toLatLngs","import flip from '@turf/flip'\r\nimport { getCoords } from '@turf/invariant'\r\nimport { flow } from 'lodash'\r\n\r\nfunction toLatLngs(geojson) {\r\n  return flow([\r\n    getCoords,\r\n    flip\r\n  ])(geojson)\r\n}\r\n\r\nexport default toLatLngs","import bbox from '@turf/bbox'\r\n\r\nfunction toBounds(geojson) {\r\n  let bboxArr = bbox(geojson)\r\n\r\n  return [\r\n    [bboxArr[1], bboxArr[0]],\r\n    [bboxArr[3], bboxArr[2]]\r\n  ]\r\n}\r\n\r\nexport default toBounds","import proj4 from 'proj4'\r\n\r\nconst hc_tinhs = [\r\n  {ten_tp: '', ma_tp: '', kt_truc: 0, EPSG: ''}\r\n]\r\n\r\nfunction projWGS84ToVN2000(coord){\r\n  return proj4('EPSG:4326', 'EPSG:9210',coord);\r\n}\r\n\r\nexport default projWGS84ToVN2000","function projVN2000ToWGS84(){\r\n\r\n}\r\n\r\nexport default projVN2000ToWGS84","/**\r\n * Parse a string containing a latitude, longitude pair and return them as an array.\r\n *\r\n * @param {String} Str\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nfunction parseLatLngStr(str) {\r\n  let match = /^\\s*?(-?[0-9]+\\.?[0-9]+?)\\s*,\\s*(-?[0-9]+\\.?[0-9]+?)\\s*$/.exec(str)\r\n\r\n  if (match && match.length === 3) {\r\n    let lat = parseFloat(match[1])\r\n    let lng = parseFloat(match[2])\r\n\r\n    if ((lat >= -90)\r\n      && (lat <= 90)\r\n      && (lng >= -180)\r\n      && (lng <= 180)\r\n    ) {\r\n      return [lat, lng]\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport default parseLatLngStr"],"names":["toPosition","geojson","isLatLongStr","parseLatLngStr","flow","center","flip","getCoord","position","lat","lng","toLatLngs","getCoords","toBounds","bboxArr","bbox","coord","projVN2000ToWGS84","str","match","exec","length","parseFloat"],"mappings":"uOAOA,SAAAA,EAAoBC,GAClB,OAAGC,EAAaD,GAA+BE,EAACF,GAEzCG,EAAK,CACVC,EAAQC,EAAMC,GADTH,CAEJH,EACJ,CCXD,WAAmBA,GACjB,MAAcO,EAAGR,EAAWC,GAE5B,MAAO,CACLQ,IAAKD,EAAS,GACdE,IAAKF,EAAS,GAEjB,CCLD,SAAAG,EAAmBV,GACjB,OAAWG,EAAC,CACVQ,EACAN,GAFSF,CAGRH,EACJ,CCPD,SAAAY,EAAkBZ,GAChB,IAAWa,EAAGC,EAAKd,GAEnB,MAAO,CACL,CAACa,EAAQ,GAAIA,EAAQ,IACrB,CAACA,EAAQ,GAAIA,EAAQ,IAExB,CCHD,WAA2BE,GACzB,SAAa,YAAa,YAAYA,EACvC,CCRD,SAAAC,IAA4B,CCQ5B,WAAwBC,GACtB,IAASC,EAAG,2DAA2DC,KAAKF,GAE5E,GAAIC,GAA0B,IAAjBA,EAAME,OAAc,CAC/B,IAAOZ,EAAGa,WAAWH,EAAM,IACpBT,EAAGY,WAAWH,EAAM,IAE3B,OAAKV,IAAQ,IACPA,GAAO,IACPC,IAAQ,KACRA,GAAO,IAEJ,CAACD,EAAKC,OAIhB,CAED,OACD,IAAA"}